<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureOraclev10g class="oracle.dbtools.crest.model.design.storage.oracle.v10g.StoredProcedureOraclev10g" name="AUCTION_DUE_CHECK" directorySegmentName="seg_0" id="2CDA420B-D053-D62D-268B-438952D1FE1A">
<sourceConnName>cocoFarm</sourceConnName>
<sourceObjSchema>COCOFARM</sourceObjSchema>
<sourceObjName>AUCTION_DUE_CHECK</sourceObjName>
<createdBy>Sonn</createdBy>
<createdTime>2018-06-17 09:48:31 UTC</createdTime>
<ownerDesignName>cocoDataModel</ownerDesignName>
<owner>9B2CBDD9-D4EA-AD8B-3936-1238B79FFDD3</owner>
<source>CREATE OR REPLACE procedure COCOFARM.AUCTION_DUE_CHECK (DBTIME out timestamp, NEXTCHECK out timestamp)&lt;br/&gt;is&lt;br/&gt;	bid_alive_cnt	number;&lt;br/&gt;	no_bid_cnt		number;&lt;br/&gt;	has_bid_cnt		number;&lt;br/&gt;	bidder			number;&lt;br/&gt;	timewindow		timestamp;&lt;br/&gt;	has_next_time	number;&lt;br/&gt;&lt;br/&gt;	err_code		number;&lt;br/&gt;	err_message		varchar2(255);&lt;br/&gt;&lt;br/&gt;	cursor AUCT_CUR is&lt;br/&gt;		select IDX, WRITTER_IDX, TITLE, HIGHEST_BID, TIME_WINDOW_CODE from AUCTION A where IDX in(select AUCTION_IDX from AUCTION_DUE_QUE where TIME_WINDOW &lt; SYSTIMESTAMP) for update;&lt;br/&gt;begin&lt;br/&gt;	no_bid_cnt := 0;&lt;br/&gt;	has_bid_cnt := 0;&lt;br/&gt;&lt;br/&gt;	for AUCTION_ROW in AUCT_CUR loop&lt;br/&gt;		select count(1) into bid_alive_cnt from BID_ALIVE_QUE where AUCTION_IDX = AUCTION_ROW.IDX;&lt;br/&gt;&lt;br/&gt;		if( bid_alive_cnt = 0 ) then&lt;br/&gt;			update AUCTION set STATE_CODE = 4, CLOSED_WHEN = SYSTIMESTAMP, FINISHED_WHEN = SYSTIMESTAMP where current of AUCT_CUR;&lt;br/&gt;			insert into MESSAGE (SENDER_IDX, RECEIVER_IDX, TITLE, CONTENT, TYPE_CODE)&lt;br/&gt;				values (0, AUCTION_ROW.WRITTER_IDX, &apos;신청하신 경매 &apos;||AUCTION_ROW.TITLE||&apos; 가 입찰이 없이 만료되었습니다.&apos;, &apos;경매기간 만료: 유효입찰 없음&apos;,1);&lt;br/&gt;			delete AUCTION_DUE_QUE where AUCTION_IDX = AUCTION_ROW.IDX;&lt;br/&gt;			no_bid_cnt := no_bid_cnt+1;&lt;br/&gt;&lt;br/&gt;			insert into PLOGGER (NAME, RESULTCODE, CONTENT) values (&apos;AUCTION_DUE_CHECK&apos;,1,&apos;successful. no ALIVE_BID found on AUCTION.IDX: &apos;||AUCTION_ROW.IDX);&lt;br/&gt;&lt;br/&gt;		else ----- 입찰금 지불 기간에 대한 기준 필요. 현재 테스트용 4번 코드 지정중.&lt;br/&gt;			insert into BID_CONTRACT_QUE (AUCTION_IDX, BID_AMOUNT, CONTRACT_T_WIN_CODE) values (AUCTION_ROW.IDX, AUCTION_ROW.HIGHEST_BID, AUCTION_ROW.TIME_WINDOW_CODE);&lt;br/&gt;			select BIDDER_IDX into bidder from BID_ALIVE_QUE where AUCTION_IDX = AUCTION_ROW.IDX and BID_AMOUNT = AUCTION_ROW.HIGHEST_BID;&lt;br/&gt;			update BID set STATE_CODE = case &lt;br/&gt;											when (STATE_CODE = 1) then 3&lt;br/&gt;											when (STATE_CODE = 2) then 4&lt;br/&gt;											else STATE_CODE&lt;br/&gt;											end&lt;br/&gt;				where (AUCTION_IDX,AMOUNT) in (select AUCTION_IDX, BID_AMOUNT from BID_ALIVE_QUE where AUCTION_IDX = AUCTION_ROW.IDX);&lt;br/&gt;			select PAYMENT_DUE into timewindow from BID_CONTRACT_QUE where AUCTION_IDX = AUCTION_ROW.IDX;&lt;br/&gt;			insert into MESSAGE (SENDER_IDX, RECEIVER_IDX, TITLE, CONTENT, TYPE_CODE)&lt;br/&gt;					values (0, bidder, &apos;입찰하신 경매 &apos;||AUCTION_ROW.TITLE||&apos; 에 낙찰되셨습니다&apos;, to_char(timewindow, &apos;YYYY-MM-DD HH24:MI:SS&apos;) ||&apos; 까지 &apos;||AUCTION_ROW.HIGHEST_BID||&apos;원 을 지불하셔야 낙찰이 완료됩니다. 그렇지 않을 시, 낙찰 권한이 차등위 입찰로 넘어가고 계약 위반에 대해 제재를 받을 수 있음을 알려드립니다.&apos;, 1);&lt;br/&gt;			insert into MESSAGE (SENDER_IDX, RECEIVER_IDX, TITLE, CONTENT, TYPE_CODE)&lt;br/&gt;					values (0, AUCTION_ROW.WRITTER_IDX, &apos;신청하신 경매 &apos;||AUCTION_ROW.TITLE||&apos; 의 낙찰이 시작되었습니다.&apos;,&apos;낙찰가 : &apos;||AUCTION_ROW.HIGHEST_BID||&apos; 최고액 입찰자가 입찰액을 지불하면 낙찰 절차가 완료됩니다.&apos;, 1);&lt;br/&gt;			update AUCTION set STATE_CODE = 5, CLOSED_WHEN = SYSTIMESTAMP where current of AUCT_CUR;&lt;br/&gt;			delete AUCTION_DUE_QUE where AUCTION_IDX = AUCTION_ROW.IDX;&lt;br/&gt;&lt;br/&gt;			insert into PLOGGER (NAME, RESULTCODE, CONTENT) values (&apos;AUCTION_DUE_CHECK&apos;,1,&apos;successful. found ALIVE_BID on AUCTION.IDX: &apos;||AUCTION_ROW.IDX||&apos; is bidder: &apos;||bidder||&apos;, AMOUNT: &apos;||AUCTION_ROW.HIGHEST_BID);&lt;br/&gt;		end if;&lt;br/&gt;&lt;br/&gt;	end loop;&lt;br/&gt;&lt;br/&gt;	insert into PLOGGER (NAME, RESULTCODE, CONTENT) values (&apos;AUCTION_DUE_CHECK&apos;,1,&apos;AUCTION_DUE_CHECK done. (no_bid_cnt: &apos;||no_bid_cnt||&apos;, has_bid_cnt: &apos;||has_bid_cnt||&apos;)&apos;);&lt;br/&gt;&lt;br/&gt;	commit;&lt;br/&gt;&lt;br/&gt;	select count(1) into has_next_time from AUCTION_DUE_QUE;&lt;br/&gt;	if (has_next_time &gt;0) then&lt;br/&gt;		select SYSTIMESTAMP , least(min(TIME_WINDOW),(select min(TIME_WINDOW)+SYSTIMESTAMP from AUCTION_TIME_WINDOW_TYPE )) into DBTIME, NEXTCHECK from AUCTION_DUE_QUE group by SYSTIMESTAMP;&lt;br/&gt;	else&lt;br/&gt;		select SYSTIMESTAMP, SYSTIMESTAMP into DBTIME, NEXTCHECK from DUAL;&lt;br/&gt;	end if;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;exception when OTHERS then&lt;br/&gt;&lt;br/&gt;	err_code := sqlcode;&lt;br/&gt;	err_message := substr(sqlerrm, 1, 255);&lt;br/&gt;&lt;br/&gt;	insert into PLOGGER (NAME, RESULTCODE, CONTENT, err_code, err_message)&lt;br/&gt;		values (&apos;AUCTION_DUE_CHECK&apos;,0,&apos;ERROR!!!. (no_bid_cnt: &apos;||no_bid_cnt||&apos;, has_bid_cnt: &apos;||has_bid_cnt||&apos;)&apos;, err_code, err_message );&lt;br/&gt;&lt;br/&gt;	commit;&lt;br/&gt;&lt;br/&gt;	select count(1) into has_next_time from AUCTION_DUE_QUE;&lt;br/&gt;	if (has_next_time &gt;0) then&lt;br/&gt;		select SYSTIMESTAMP , min(TIME_WINDOW) into DBTIME, NEXTCHECK from AUCTION_DUE_QUE group by SYSTIMESTAMP;&lt;br/&gt;	else&lt;br/&gt;		select count(1) into has_next_time from AUCTION_TIME_WINDOW_TYPE;&lt;br/&gt;		if (has_next_time &gt;0) then&lt;br/&gt;			select SYSTIMESTAMP, SYSTIMESTAMP + min(TIME_WINDOW) into DBTIME, NEXTCHECK from AUCTION_TIME_WINDOW_TYPE group by SYSTIMESTAMP;&lt;br/&gt;		else&lt;br/&gt;			select SYSTIMESTAMP, SYSTIMESTAMP into DBTIME, NEXTCHECK from DUAL;&lt;br/&gt;		end if;&lt;br/&gt;	end if;&lt;br/&gt;&lt;br/&gt;end;</source>
</StoredProcedureOraclev10g>