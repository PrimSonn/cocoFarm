<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureOraclev10g class="oracle.dbtools.crest.model.design.storage.oracle.v10g.StoredProcedureOraclev10g" name="CHECK_TEMP_RECPT" directorySegmentName="seg_0" id="497EDB55-6364-95A3-D4DB-46695406EA55">
<sourceConnName>cocoFarm</sourceConnName>
<sourceObjSchema>COCOFARM</sourceObjSchema>
<sourceObjName>CHECK_TEMP_RECPT</sourceObjName>
<createdBy>Sonn</createdBy>
<createdTime>2018-06-17 09:48:31 UTC</createdTime>
<ownerDesignName>cocoDataModel</ownerDesignName>
<owner>9B2CBDD9-D4EA-AD8B-3936-1238B79FFDD3</owner>
<source>CREATE OR REPLACE procedure COCOFARM.CHECK_TEMP_RECPT (in_acc_idx ACCOUNT.IDX%type, in_pay_code MAIN_RECEIPT.PAYMENT_CODE%type, merchant_uid MAIN_RECEIPT.IDX%type, in_price MAIN_RECEIPT.MONEY_AMOUNT%type, isDone out number)&lt;br/&gt;is&lt;br/&gt;	null_checker		number;&lt;br/&gt;	checher				number;&lt;br/&gt;	main_rcpt_idx		MAIN_RECEIPT.IDX%type;&lt;br/&gt;	money_amount		MAIN_RECEIPT.MONEY_AMOUNT%type;&lt;br/&gt;	recpt_amount		SALE_OPTION_RECEIPT.AMOUNT%type;&lt;br/&gt;	acc_idx				ACCOUNT.IDX%type;&lt;br/&gt;	sale_title			SALE.TITLE%type;&lt;br/&gt;	pay_code			MAIN_RECEIPT.PAYMENT_CODE%type;&lt;br/&gt;	rcpt_bid_money		BID_CONTRACT_RECEIPT.BID_AMOUNT%type;&lt;br/&gt;	auct_title			AUCTION.TITLE%type;&lt;br/&gt;	result_code			number;&lt;br/&gt;	processCnt			number;&lt;br/&gt;	auct_idx_arr		holder := holder();&lt;br/&gt;&lt;br/&gt;	err_code			number;&lt;br/&gt;	err_message			varchar2(255);&lt;br/&gt;&lt;br/&gt;	cursor SALE_OPTION_CUR is&lt;br/&gt;		select * from SALE_OPTION where IDX in (select SALE_OPTION_IDX from SALE_OPTION_RECEIPT where MAIN_RECPT_IDX = merchant_uid) for update;&lt;br/&gt;	cursor BID_CUR is&lt;br/&gt;		select * from BID where (AUCTION_IDX,AMOUNT) in (select BR.AUCTION_IDX, BQ.BID_AMOUNT from BID_CONTRACT_RECEIPT BR left join BID_ALIVE_QUE BQ on BR.AUCTION_IDX = BQ.AUCTION_IDX where BR.MAIN_RECPT_IDX = merchant_uid) and STATE_CODE in (3,4) for update;&lt;br/&gt;begin&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;	select 0 into isDone from DUAL;&lt;br/&gt;	result_code := 0;&lt;br/&gt;	processCnt := 0;&lt;br/&gt;&lt;br/&gt;	savepoint START_TRANSACTION;&lt;br/&gt;&lt;br/&gt;	select count(1) into null_checker from MAIN_RECEIPT where IDX = merchant_uid;&lt;br/&gt;&lt;br/&gt;	if (null_checker =0) then&lt;br/&gt;		result_code := -1;&lt;br/&gt;	else&lt;br/&gt;		select BUYER_IDX, STATE_CODE, MONEY_AMOUNT, PAYMENT_CODE into acc_idx, null_checker, money_amount, pay_code from MAIN_RECEIPT where IDX = merchant_uid;&lt;br/&gt;&lt;br/&gt;		if (null_checker &lt;&gt;0) then--대상 영수증이 임시 영수증이 아닐 때.&lt;br/&gt;			if (pay_code = in_pay_code) then&lt;br/&gt;				result_code := 2;&lt;br/&gt;			else&lt;br/&gt;				result_code := -2;&lt;br/&gt;			end if;&lt;br/&gt;&lt;br/&gt;		elsif(acc_idx &lt;&gt; in_acc_idx) then&lt;br/&gt;			result_code := -3;&lt;br/&gt;		elsif (money_amount &lt;&gt; in_price) then&lt;br/&gt;			delete BID_CONTRACT_RECEIPT where MAIN_RECPT_IDX = merchant_uid;&lt;br/&gt;			delete SALE_OPTION_RECEIPT where MAIN_RECPT_IDX = merchant_uid;&lt;br/&gt;			delete SALE_RECEIPT where MAIN_RECPT_IDX = merchant_uid;&lt;br/&gt;			delete MAIN_RECEIPT where IDX = merchant_uid and BUYER_IDX = in_acc_idx;&lt;br/&gt;			result_code := -4;&lt;br/&gt;		else&lt;br/&gt;			select count(1) into null_checker from SALE_OPTION_RECEIPT where MAIN_RECPT_IDX = merchant_uid;&lt;br/&gt;&lt;br/&gt;			if(null_checker &gt;0) then&lt;br/&gt;				select count(1) into null_checker from SALE_OPTION O inner join SALE_OPTION_RECEIPT R on O.IDX = R.SALE_OPTION_IDX where O.ISDEL &lt;&gt;0;&lt;br/&gt;&lt;br/&gt;				if (null_checker &lt;&gt;0) then &lt;br/&gt;					result_code := -5;&lt;br/&gt;				else&lt;br/&gt;					for SALE_OPTION_ROW in SALE_OPTION_CUR loop&lt;br/&gt;&lt;br/&gt;						processCnt := processCnt +1;&lt;br/&gt;						select AMOUNT into recpt_amount from SALE_OPTION_RECEIPT where MAIN_RECPT_IDX = merchant_uid and SALE_IDX = SALE_OPTION_ROW.SALE_IDX and SALE_OPTION_IDX = SALE_OPTION_ROW.IDX;&lt;br/&gt;&lt;br/&gt;						if (recpt_amount &gt; SALE_OPTION_ROW.LEFT_AMOUNT ) then&lt;br/&gt;							rollback to START_TRANSACTION;&lt;br/&gt;							result_code := -6;&lt;br/&gt;							exit;&lt;br/&gt;						end if;&lt;br/&gt;&lt;br/&gt;						update SALE_OPTION set LEFT_AMOUNT = LEFT_AMOUNT - recpt_amount where current of SALE_OPTION_CUR;&lt;br/&gt;						if (recpt_amount = SALE_OPTION_ROW.LEFT_AMOUNT) then&lt;br/&gt;							select ACC_IDX, TITLE into acc_idx, sale_title from SALE where IDX = SALE_OPTION_ROW.SALE_IDX;&lt;br/&gt;							insert into MESSAGE (SENDER_IDX, RECEIVER_IDX, TITLE, CONTENT, TYPE_CODE) values (0,acc_idx,&apos;판매글 &apos;&apos;&apos;||sale_title||&apos;&apos;&apos; 의 옵션 &apos;&apos;&apos;||SALE_OPTION_ROW.NAME||&apos;&apos;&apos; 이 모두 소진되었습니다.&apos;,&apos;해당 옵션의 재고가 모두 소진되었음을 알려드립니다.&apos;,2);&lt;br/&gt;						end if;&lt;br/&gt;&lt;br/&gt;					end loop;&lt;br/&gt;&lt;br/&gt;				end if;&lt;br/&gt;			end if;-- 판매 옵션 처리 끝.&lt;br/&gt;&lt;br/&gt;			if (result_code =0) then&lt;br/&gt;				select count(1) into null_checker from BID_CONTRACT_RECEIPT where MAIN_RECPT_IDX = merchant_uid;&lt;br/&gt;&lt;br/&gt;				if (null_checker &gt;0) then&lt;br/&gt;					select count(1) into checher from BID_CONTRACT_RECEIPT BR inner join BID_CONTRACT_QUE BQ on BR.AUCTION_IDX = BQ.AUCTION_IDX where BR.MAIN_RECPT_IDX = merchant_uid;&lt;br/&gt;&lt;br/&gt;					if (null_checker &lt;&gt; checher) then&lt;br/&gt;						rollback to START_TRANSACTION;&lt;br/&gt;						result_code := -8;&lt;br/&gt;					else&lt;br/&gt;						auct_idx_arr.extend(checher);&lt;br/&gt;						select AUCTION_IDX bulk collect into auct_idx_arr from BID_CONTRACT_RECEIPT where MAIN_RECPT_IDX = merchant_uid;&lt;br/&gt;&lt;br/&gt;						for BID_ROW in BID_CUR loop&lt;br/&gt;							select WRITTER_IDX, TITLE into acc_idx, auct_title from AUCTION where IDX = BID_ROW.AUCTION_IDX;&lt;br/&gt;							if(BID_ROW.STATE_CODE = 3) then&lt;br/&gt;								update BID set STATE_CODE = 30 ,FINISHED_WHEN = SYSTIMESTAMP where current of BID_CUR;&lt;br/&gt;								insert into MESSAGE (SENDER_IDX, RECEIVER_IDX, TITLE, CONTENT, TYPE_CODE) values (0, BID_ROW.BIDDER_IDX, &apos;&apos;&apos;&apos;||auct_title||&apos;&apos;&apos; 의 낙찰금을 지불하셨습니다.&apos;, &apos;&apos;&apos;&apos;||auct_title||&apos;&apos;&apos;에 대한 낙찰금 &apos;||BID_ROW.AMOUNT||&apos;원 을 &apos;||to_char(SYSTIMESTAMP,&apos;YYYY-MM-DD HH24:MI:SS&apos;)||&apos; 에 지불하셨습니다. 해당 경매에 완전히 낙찰이 되셨습니다.&apos;,1);&lt;br/&gt;								insert into MESSAGE (SENDER_IDX, RECEIVER_IDX, TITLE, CONTENT, TYPE_CODE) values (0, acc_idx, &apos;&apos;&apos;&apos;||auct_title||&apos;&apos;&apos;의 낙찰이 완료되었습니다.&apos;,&apos;&apos;&apos;&apos;||auct_title||&apos;&apos;&apos;의 최고 입찰자가 최종 낙찰금인 &apos;||BID_ROW.AMOUNT||&apos;원 을 &apos;||to_char(SYSTIMESTAMP,&apos;YYYY-MM-DD HH24:MI:SS&apos;)||&apos;에 지불하여 낙찰이 완료되었습니다.&apos;,1);&lt;br/&gt;							else&lt;br/&gt;								update BID set STATE_CODE = 31 ,FINISHED_WHEN = SYSTIMESTAMP  where current of BID_CUR;&lt;br/&gt;								insert into MESSAGE (SENDER_IDX, RECEIVER_IDX, TITLE, CONTENT, TYPE_CODE) values (0,BID_ROW.BIDDER_IDX, &apos;&apos;&apos;&apos;||auct_title||&apos;&apos;&apos;의 낙찰에 실패하셨습니다.&apos;,&apos;&apos;&apos;&apos;||auct_title||&apos;&apos;&apos;의 낙찰에 실패하셨습니다.&apos;,1);&lt;br/&gt;							end if;&lt;br/&gt;							processCnt := processCnt +1;&lt;br/&gt;						end loop;&lt;br/&gt;&lt;br/&gt;						update AUCTION set STATE_CODE = 9, FINISHED_WHEN = SYSTIMESTAMP where IDX in (select COLUMN_VALUE from table (auct_idx_arr));&lt;br/&gt;						delete BID_CONTRACT_QUE where AUCTION_IDX in (select COLUMN_VALUE from table (auct_idx_arr));&lt;br/&gt;						delete BID_ALIVE_QUE where AUCTION_IDX in (select COLUMN_VALUE from table (auct_idx_arr));&lt;br/&gt;					end if;&lt;br/&gt;				else&lt;br/&gt;					if (processCnt=0) then &lt;br/&gt;						result_code := -9;&lt;br/&gt;					end if;&lt;br/&gt;				end if;&lt;br/&gt;			end if;--경매/입찰 처리 끝.&lt;br/&gt;&lt;br/&gt;			if (result_code = 0) then&lt;br/&gt;				update MAIN_RECEIPT set STATE_CODE = 1, PAYMENT_CODE = in_pay_code where IDX = merchant_uid;&lt;br/&gt;				result_code := 1;&lt;br/&gt;			elsif(result_code is null) then&lt;br/&gt;				result_code := -7;&lt;br/&gt;			else&lt;br/&gt;				rollback to START_TRANSACTION;&lt;br/&gt;			end if;&lt;br/&gt;&lt;br/&gt;		end if;&lt;br/&gt;	end if;&lt;br/&gt;&lt;br/&gt;	select result_code into isDone from DUAL;&lt;br/&gt;	insert into PLOGGER (NAME, RESULTCODE, CONTENT) values (&apos;CHECK_TEMP_RECPT&apos;,isDone,&apos;merchant_uid: &apos;||merchant_uid||&apos;, in_price: &apos;||in_price||&apos;, in_acc_idx: &apos;||in_acc_idx||&apos;, processCnt: &apos;||processCnt);&lt;br/&gt;&lt;br/&gt;	commit;&lt;br/&gt;&lt;br/&gt;exception when OTHERS then&lt;br/&gt;&lt;br/&gt;	err_code := sqlcode;&lt;br/&gt;	err_message := substr(sqlerrm, 1, 255);	&lt;br/&gt;&lt;br/&gt;	insert into PLOGGER (NAME, RESULTCODE, CONTENT, err_code, err_message)&lt;br/&gt;		values (&apos;CHECK_TEMP_RECPT&apos;, 0, &apos;ERROR!  merchant_uid: &apos;||merchant_uid||&apos;, in_price: &apos;||in_price||&apos;, in_acc_idx: &apos;||in_acc_idx, err_code, err_message );&lt;br/&gt;	commit;&lt;br/&gt;&lt;br/&gt;	select 0 into isDone from DUAL;&lt;br/&gt;end;</source>
</StoredProcedureOraclev10g>